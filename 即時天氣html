
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>高雄市小港區大坪頂即時天氣</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <style>
        body {
            font-family: 'Inter', 'Noto Sans CJK TC', sans-serif;
        }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const App = () => {
            const { useState, useEffect, useRef, useCallback } = React;
            const [weatherData, setWeatherData] = useState(null);
            const [loading, setLoading] = useState(true);
            const [error, setError] = useState(null);
            const [currentTime, setCurrentTime] = useState('');

            const lastChimeHourRef = useRef(-1); 
            const chimeAudioRef = useRef(null); 
            const API_KEY = "c3a279983235d57dc69818ffffe9a265";
// 22.55034444494415, 120.38343738798848
            const LATITUDE = 22.55034444494415;
            const LONGITUDE = 120.38343738798848;
            const speechSynthRef = useRef(null);

            useEffect(() => {
                if ('speechSynthesis' in window) {
                    speechSynthRef.current = window.speechSynthesis;
                } else {
                    console.warn("瀏覽器不支援 Web Speech API (SpeechSynthesis)。");
                }
            }, []);

            const speakText = useCallback((text) => {
                if (speechSynthRef.current && text) {
                    speechSynthRef.current.cancel();
                    const utterance = new SpeechSynthesisUtterance(text);
                    utterance.lang = 'zh-TW'; 
                    utterance.rate = 1; 
                    utterance.pitch = 1; 
                    utterance.onerror = (event) => {
                        console.error('語音播報錯誤:', event.error);
                        setError(`語音播報失敗: ${event.error}. 可能需要使用者互動來啟用語音。`);
                    };                    
                    speechSynthRef.current.speak(utterance);
                } else if (!('speechSynthesis' in window)) {
                    setError("您的瀏覽器不支援語音播報功能。");
                }
            }, []);

            const fetchWeatherData = useCallback(async () => {
                if (!API_KEY) {
                    setError("請在程式碼中填入你的 OpenWeatherMap API Key。");
                    setLoading(false);
                    return;
                }

                setLoading(true); 
                setError(null); 

                const apiUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${LATITUDE}&lon=${LONGITUDE}&appid=${API_KEY}&units=metric&lang=zh_tw`;

                try {
                    let response;
                    let data;
                    let retries = 0;
                    const MAX_RETRIES = 5;
                    const BASE_DELAY = 1000; // 1 second

                    while (retries < MAX_RETRIES) {
                        response = await fetch(apiUrl);
                        if (response.ok) {
                            data = await response.json();
                            break; // Success, exit loop
                        } else if (response.status === 429) { // Too Many Requests
                            const delay = BASE_DELAY * Math.pow(2, retries);
                            console.warn(`API Rate limit hit. Retrying in ${delay / 1000} seconds...`);
                            await new Promise(resolve => setTimeout(resolve, delay));
                            retries++;
                        } else if (response.status === 401) { 
                            throw new Error("API Key 無效或尚未啟用。請確認您的 OpenWeatherMap API Key 是否正確且已啟用。");
                        }
                        else {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                    }

                    if (!response.ok) {
                        throw new Error(`無法獲取天氣資料: ${response.statusText}`);
                    }

                    const weatherCondition = data.weather[0].description;
                    const temperature = data.main.temp.toFixed(1); 
                    const feelsLike = data.main.feels_like.toFixed(1); 
                    const humidity = data.main.humidity;
                    const windSpeed = (data.wind.speed * 3.6).toFixed(1); 
                    const windDeg = data.wind.deg;
                    const pressure = data.main.pressure; 
                    const visibility = (data.visibility / 1000).toFixed(1); 
                    const getWindDirection = (deg) => {
                        const directions = ['北', '東北', '東', '東南', '南', '西南', '西', '西北'];
                        const index = Math.round((deg % 360) / 45);
                        return directions[index % 8];
                    };

                    const isRaining = data.weather[0].main === 'Rain' || data.weather[0].main === 'Drizzle';
                    const precipitationAmount = isRaining ? "有降水" : "0.0 mm"; 

                    setWeatherData({
                        condition: weatherCondition,
                        temperature: `${temperature}°C`,
                        feelsLike: `${feelsLike}°C`, 
                        humidity: `${humidity}%`,
                        precipitation: precipitationAmount,
                        windSpeed: `${windSpeed} 公里/小時`,
                        windDirection: `${getWindDirection(windDeg)} (${windDeg}°)`,
                        pressure: `${pressure} hPa`,
                        visibility: `${visibility} 公里`, 
                        isRaining: isRaining,
                        timestamp: new Date().toLocaleString('zh-TW', {
                            year: 'numeric',
                            month: '2-digit',
                            day: '2-digit',
                            hour: '2-digit',
                            minute: '2-digit',
                            second: '2-digit',
                            hour12: false
                        }).replace(/\//g, '-')
                    });
                } catch (err) {
                    console.error("獲取天氣資料失敗:", err);
                    setError(`無法獲取天氣資料，請稍後再試。錯誤: ${err.message}`);
                } finally {
                    setLoading(false);
                }
            }, [API_KEY]); 

            useEffect(() => {
                fetchWeatherData(); 
                const intervalId = setInterval(fetchWeatherData, 600000);
                return () => clearInterval(intervalId);
            }, [fetchWeatherData]); 

            useEffect(() => {
                if (!chimeAudioRef.current) {
                    chimeAudioRef.current = new Audio('https://www.soundjay.com/misc/sounds/bell-ringing-01.mp3');
                    chimeAudioRef.current.volume = 0.7; 
                }

                const updateCurrentTimeAndChime = () => {
                    const now = new Date();
                    const currentHour = now.getHours();
                    const currentMinute = now.getMinutes();
                    const currentSecond = now.getSeconds();

                    setCurrentTime(now.toLocaleString('zh-TW', {
                        year: 'numeric',
                        month: '2-digit',
                        day: '2-digit',
                        hour: '2-digit',
                        minute: '2-digit',
                        second: '2-digit',
                        hour12: false
                    }).replace(/\//g, '-'));

                    if (currentMinute === 0 && currentSecond >= 0 && currentSecond < 5) {
                        if (currentHour !== lastChimeHourRef.current) {
                            if (chimeAudioRef.current) {
                                chimeAudioRef.current.play().catch(e => {
                                    console.error("播放報時音效失敗:", e);
                                    setError("報時音效可能因瀏覽器政策被阻擋，請點擊頁面任意處啟用音效。");
                                });
                            }
                            lastChimeHourRef.current = currentHour; 
                        }
                    } else if (currentMinute === 59 && currentSecond > 55) {
                        lastChimeHourRef.current = -1;
                    }
                };

                updateCurrentTimeAndChime(); 
                const timeIntervalId = setInterval(updateCurrentTimeAndChime, 1000); 
                return () => clearInterval(timeIntervalId);
            }, []); 

            const handleManualUpdate = () => {
                fetchWeatherData(); 
                const now = new Date();
                const currentHour = now.getHours();
                const currentMinute = now.getMinutes();
                const speechText = `現在時間是 ${currentHour} 點 ${currentMinute} 分。`;
                speakText(speechText); 
            };


            const getBackgroundClass = (condition) => {
                if (!condition) return 'bg-gradient-to-br from-blue-200 to-indigo-200';
                const lowerCaseCondition = condition.toLowerCase();
                if (lowerCaseCondition.includes('雨') || lowerCaseCondition.includes('rain') || lowerCaseCondition.includes('drizzle')) {
                    return 'bg-gradient-to-br from-gray-600 to-gray-800 text-white'; 
                } else if (lowerCaseCondition.includes('雲') || lowerCaseCondition.includes('cloud')) {
                    return 'bg-gradient-to-br from-blue-300 to-gray-400'; 
                } else if (lowerCaseCondition.includes('晴') || lowerCaseCondition.includes('clear')) {
                    return 'bg-gradient-to-br from-blue-300 to-sky-500'; 
                } else if (lowerCaseCondition.includes('霧') || lowerCaseCondition.includes('mist') || lowerCaseCondition.includes('fog')) {
                    return 'bg-gradient-to-br from-gray-300 to-slate-400'; 
                }
                return 'bg-gradient-to-br from-blue-200 to-indigo-200'; 
            };

            const getWeatherIcon = (condition) => {
                if (!condition) return '☀️'; 
                const lowerCaseCondition = condition.toLowerCase();
                if (lowerCaseCondition.includes('晴') || lowerCaseCondition.includes('clear')) {
                    return '☀️'; 
                } else if (lowerCaseCondition.includes('雲') || lowerCaseCondition.includes('cloud')) {
                    return '☁️'; 
                } else if (lowerCaseCondition.includes('雨') || lowerCaseCondition.includes('rain') || lowerCaseCondition.includes('drizzle')) {
                    return '🌧️'; 
                } else if (lowerCaseCondition.includes('雷') || lowerCaseCondition.includes('thunder')) {
                    return '⛈️'; 
                } else if (lowerCaseCondition.includes('雪') || lowerCaseCondition.includes('snow')) {
                    return '❄️'; 
                } else if (lowerCaseCondition.includes('霧') || lowerCaseCondition.includes('mist') || lowerCaseCondition.includes('fog')) {
                    return '🌫️'; 
                }
                return '❓';
            };

            if (loading) {
                return (
                    <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-blue-100 to-purple-100">
                        <div className="flex flex-col items-center p-8 rounded-xl shadow-2xl bg-white bg-opacity-90 text-blue-700">
                            <svg className="animate-spin h-10 w-10 text-blue-500 mb-3" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            <div className="text-xl font-semibold">資料載入中，請稍候...</div>
                        </div>
                    </div>
                );
            }

            if (error) {
                return (
                    <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-red-100 to-orange-100">
                        <div className="text-xl font-semibold text-red-700 p-6 rounded-lg shadow-xl bg-white bg-opacity-90 flex flex-col items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 text-red-500 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="2">
                                <path strokeLinecap="round" strokeLinejoin="round" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                            <p className="text-center">錯誤: {error}</p>
                            {error.includes("瀏覽器政策") && (
                                <p className="text-sm mt-2 text-gray-600">
                                    請點擊頁面任意處或音訊播放器以啟用音效。
                                </p>
                            )}
                            {error.includes("語音播報失敗") && (
                                <p className="text-sm mt-2 text-gray-600">
                                    此功能可能需要使用者互動（例如點擊頁面）才能首次啟用。
                                </p>
                            )}
                            <button
                                onClick={handleManualUpdate}
                                className="mt-4 bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50"
                            >
                                重新載入
                            </button>
                        </div>
                    </div>
                );
            }

            if (!weatherData) {
                return (
                    <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-gray-100 to-slate-200">
                        <div className="text-xl font-semibold text-gray-700 p-6 rounded-lg shadow-xl bg-white bg-opacity-90 flex flex-col items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 text-gray-500 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="2">
                                <path strokeLinecap="round" strokeLinejoin="round" d="M9.172 16.172a4 4 0 015.656 0M9.172 7.828a4 4 0 015.656 0M12 10.5V16m-4 2h8a2 2 0 002-2V7a2 2 0 00-2-2H8a2 2 0 00-2 2v9a2 2 0 002 2z" />
                            </svg>
                            <p className="text-center">無法顯示天氣資料。請檢查您的 API Key 或稍後再試。</p>
                            <button
                                onClick={handleManualUpdate}
                                className="mt-4 bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50"
                            >
                                重新載入
                            </button>
                        </div>
                    </div>
                );
            }

            return (
                <div className={`min-h-screen flex items-center justify-center p-4 sm:p-6 transition-all duration-500 ${getBackgroundClass(weatherData.condition)}`}>
                    <div className="bg-white rounded-3xl shadow-2xl p-6 sm:p-8 md:p-10 max-w-lg w-full transform transition-transform duration-300 hover:scale-105">
                        <h2 className="text-2xl sm:text-3xl font-extrabold text-center mb-4 text-blue-800 tracking-wide">
                            高雄市大坪頂週邊即時天氣
                        </h2>
                        <p className="text-center text-sm text-gray-500 mb-6">資料來源: OpenWeatherMap</p>

                        <div className="text-center text-xl sm:text-2xl font-semibold text-gray-700 mb-4 bg-blue-50 py-2 rounded-lg shadow-inner">
                            現在時刻：<span className="font-bold text-blue-600">{currentTime}</span>
                        </div>

                        <div className={`flex items-center justify-center p-4 rounded-xl mb-6 shadow-md transition-all duration-300 ${
                            weatherData.isRaining ? 'bg-blue-100 text-blue-700' : 'bg-green-100 text-green-700'
                        }`}>
                            <span className="text-4xl sm:text-5xl mr-3">{getWeatherIcon(weatherData.condition)}</span>
                            <span className="text-2xl sm:text-3xl font-extrabold">
                                {weatherData.isRaining ? '目前正在下雨！' : '目前不會下雨！'}
                            </span>
                        </div>

                        <div className="space-y-4 text-lg sm:text-xl text-gray-800">
                            <div className="flex justify-between items-center bg-gray-50 p-3 rounded-lg shadow-sm">
                                <span className="font-semibold text-gray-600 flex items-center">
                                    <span className="mr-2 text-xl">🌡️</span>天氣狀況
                                </span>
                                <span className="font-medium">{weatherData.condition}</span>
                            </div>
                            <div className="flex justify-between items-center bg-gray-50 p-3 rounded-lg shadow-sm">
                                <span className="font-semibold text-gray-600 flex items-center">
                                    <span className="mr-2 text-xl">☀️</span>溫度
                                </span>
                                <span className="font-medium">{weatherData.temperature}</span>
                            </div>
                            <div className="flex justify-between items-center bg-gray-50 p-3 rounded-lg shadow-sm">
                                <span className="font-semibold text-gray-600 flex items-center">
                                    <span className="mr-2 text-xl">🧍‍♀️</span>體感溫度
                                </span>
                                <span className="font-medium">{weatherData.feelsLike}</span>
                            </div>
                            <div className="flex justify-between items-center bg-gray-50 p-3 rounded-lg shadow-sm">
                                <span className="font-semibold text-gray-600 flex items-center">
                                    <span className="mr-2 text-xl">💧</span>相對濕度
                                </span>
                                <span className="font-medium">{weatherData.humidity}</span>
                            </div>
                            <div className="flex justify-between items-center bg-gray-50 p-3 rounded-lg shadow-sm">
                                <span className="font-semibold text-gray-600 flex items-center">
                                    <span className="mr-2 text-xl">🌧️</span>降水量
                                </span>
                                <span className="font-medium">{weatherData.precipitation}</span>
                            </div>
                            <div className="flex justify-between items-center bg-gray-50 p-3 rounded-lg shadow-sm">
                                <span className="font-semibold text-gray-600 flex items-center">
                                    <span className="mr-2 text-xl">💨</span>風速
                                </span>
                                <span className="font-medium">{weatherData.windSpeed}</span>
                            </div>
                            <div className="flex justify-between items-center bg-gray-50 p-3 rounded-lg shadow-sm">
                                <span className="font-semibold text-gray-600 flex items-center">
                                    <span className="mr-2 text-xl">🧭</span>風向
                                </span>
                                <span className="font-medium">{weatherData.windDirection}</span>
                            </div>
                            <div className="flex justify-between items-center bg-gray-50 p-3 rounded-lg shadow-sm">
                                <span className="font-semibold text-gray-600 flex items-center">
                                    <span className="mr-2 text-xl">📊</span>氣壓
                                </span>
                                <span className="font-medium">{weatherData.pressure}</span>
                            </div>
                            <div className="flex justify-between items-center bg-gray-50 p-3 rounded-lg shadow-sm">
                                <span className="font-semibold text-gray-600 flex items-center">
                                    <span className="mr-2 text-xl">🔭</span>能見度
                                </span>
                                <span className="font-medium">{weatherData.visibility}</span>
                            </div>
                        </div>

                        <div className="text-sm sm:text-base text-gray-500 text-center mt-6 pt-4 border-t border-gray-200">
                            天氣資料更新時間：<span className="font-medium">{weatherData.timestamp}</span>
                        </div>

                        <div className="mt-8 text-center">
                            <button
                                onClick={handleManualUpdate}
                                className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-full shadow-lg transition duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-blue-300 focus:ring-opacity-75 flex items-center justify-center mx-auto"
                            >
                                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="2">
                                    <path strokeLinecap="round" strokeLinejoin="round" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004 12c0 2.21.894 4.208 2.342 5.656L9 20m3-2v-5h.582m15.356 2A8.001 8.001 0 004 12c0 2.21.894 4.208 2.342 5.656L9 20" />
                                </svg>
                                手動更新天氣並播報時間
                            </button>
                        </div>

                        <div className="mt-6 text-center">
                            <audio controls loop className="w-full max-w-xs mx-auto">
                                <source src="https://preview.dewolfemusic.com/S461483_128.mp3" type="audio/mpeg" />
                                您的瀏覽器不支援音訊元素。
                            </audio>
                            <p className="text-xs text-gray-400 mt-2">
                                (背景音樂：請替換為您自己的音樂檔案路徑，目前為範例音樂)
                            </p>
                            <p className="text-xs text-red-500 mt-2">
                                提醒：音效和語音播報可能因瀏覽器自動播放政策被阻擋，請點擊頁面任意處或音訊播放器以啟用音效。
                            </p>
                        </div>
                    </div>
                </div>
            );
        };

        ReactDOM.createRoot(document.getElementById('root')).render(<App />);
    </script>
</body>
</html>
